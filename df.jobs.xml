<data-definition>
    <bitfield-type type-name='job_material_category' base-type='uint32_t'> bay12: JOB_ITEM_FLAG_*
        <flag-bit name='plant'/>
        <flag-bit name='wood' comment='wood log'/>
        <flag-bit name='cloth'/>
        <flag-bit name='silk'/>
        <flag-bit name='leather'/>
        <flag-bit name='bone'/>
        <flag-bit name='shell'/>
        <flag-bit name='wood2' comment='wood material'/>
        <flag-bit name='soap'/>
        <flag-bit name='tooth'/>
        <flag-bit name='horn'/>
        <flag-bit name='pearl'/>
        <flag-bit name='yarn'/>
        <flag-bit name='strand'/>
    </bitfield-type>

    <bitfield-type type-name='dfhack_material_category' base-type='uint32_t'>
        <comment>
            An extended version of job_material_category,
            for use in some plugins, like workflow.
        </comment>
        <!-- The start must be identical to job_material_category -->
        <flag-bit name='plant'/>
        <flag-bit name='wood'/>
        <flag-bit name='cloth'/>
        <flag-bit name='silk'/>
        <flag-bit name='leather'/>
        <flag-bit name='bone'/>
        <flag-bit name='shell'/>
        <flag-bit name='wood2'/>
        <flag-bit name='soap'/>
        <flag-bit name='tooth'/>
        <flag-bit name='horn'/>
        <flag-bit name='pearl'/>
        <flag-bit name='yarn'/>
        <flag-bit name='strand'/>
        <!-- DFHack-specific fields -->
        <flag-bit name='metal'/>
        <flag-bit name='stone'/>
        <flag-bit name='sand'/>
        <flag-bit name='glass'/>
        <flag-bit name='clay'/>
        <flag-bit name='milk'/>
        <flag-bit name='gem'/>
    </bitfield-type>

    <struct-type type-name='job_list_link'>
        <code-helper name='describe'>(describe-obj $.item)</code-helper>
        <pointer name='item' type-name='job'/>
        <pointer name='prev' type-name='job_list_link'/>
        <pointer name='next' type-name='job_list_link'/>
    </struct-type>

    <bitfield-type type-name='job_flags' base-type='uint32_t'> bay12: JOBFLAG_*
        <flag-bit name='repeat'/>
        <flag-bit name='suspend'/>
        <flag-bit name='working' comment='not for food, or store in sp'/>
        <flag-bit name='fetching'
                  comment='Actually going out to bring; corresponds to items->is_fetching'/>
        <flag-bit name='special'
                  comment='bay12: UNITSOURCE: Sleep/Drink/Eat/Clean; cannot be aborted via the ui'/>
        <flag-bit name='bringing'>
            <comment>
                bay12: RETURNING
                When actually carrying non-last item to the workshop.
                If last, 'working' is used instead.
            </comment>
        </flag-bit>
        <flag-bit name='item_lost' comment='bay12: HITBYDELETION; set when a Hauled item is removed; causes cancel'/>
        <flag-bit name='noise' count='2' comment='bay12: SLEEP_DISTURBED; on the sleep job causes thoughts'/>
        <flag-bit name='by_manager' comment='bay12: QUOTASOURCE'/>
        <flag-bit name='store_item' comment='bay12: ITEMSOURCE'/>
        <flag-bit name='quality' count='3' comment='bay12: BONUS; set by improvement code'/>
    </bitfield-type>

    <enum-type type-name='job_subtype_surgery' base-type='int32_t'> bay12: JobStageType
        <enum-item name='None' value='-1'/>
        <enum-item name='Surgery'/>
        <enum-item name='StopBleeding'/>
        <enum-item name='RepairCompoundFracture'/>
        <enum-item name='RemoveRottenTissue'/>
    </enum-type>

    <struct-type type-name='job' original-name='jobst' df-list-link-type='job_list_link' df-list-link-field='list_link' key-field='id'>
        <int32_t name='id' init-value='-1'/>
        <pointer name='list_link' type-name='job_list_link'/>
        <enum name='job_type' base-type='int16_t' type-name='job_type'/>
        <enum name='job_subtype' type-name='job_subtype_surgery' init-value='None' comment='bay12: stage'/>   surgery only ?

        <code-helper name='describe'>$.job_type</code-helper>

        <compound name='pos' type-name='coord'/>

        <int32_t name='completion_timer' init-value='-1' comment='toady: duration; -1 every time unit.counters.job_counter is below 0' />

        <int32_t name='maxdur'/>

        <bitfield name='flags' type-name='job_flags'/>

        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index' init-value='-1'/>
        <int16_t name='spell' init-value='-1' comment='almost certainly no longer used'/>
        <enum name='item_type' type-name='item_type' comment='for Bait Trap jobs'/>
        <int16_t name='item_subtype' init-value='-1' comment='when StoreInStockpile this is a unit_labor'/>

        <bitfield name='specflag' type-name='stockpile_group_set'/>
        <!-- union of bitfields doesn't work in this version of codegen
            <uint32_t name='whole'/>
            <bitfield name='construct_building_flags' base-type='uint32_t'> bay12: JOB_SPEC_FLAG_CONSTRUCT_BUILDING_*
                <flag-bit name='SWITCHED_SPOT'/>
            </bitfield>
            <bitfield name='clean_patient_flags' base-type='uint32_t'> bay12: JOB_SPEC_FLAG_CLEAN_PATIENT_*
                <flag-bit name='TRIED_SOAP'/>
            </bitfield>
            <bitfield name='clean_self_flags' base-type='uint32_t'> bay12: JOB_SPEC_FLAG_CLEAN_SELF_*
                <flag-bit name='TRIED_SOAP'/>
            </bitfield>
            <bitfield name='weave_cloth_flags' base-type='uint32_t'> bay12: N/A
                <flag-bit name='USE_DYED'/>
            </bitfield>
            <bitfield name='link_building_to_trigger_flags' base-type='uint32_t'> bay12: N/A
                <flag-bit name='UNKNOWN'/> no bay12 equivalent in headers; existence
            </bitfield>
            <bitfield name='encrust_flags' type-name='stockpile_group_set'/>
        </compound>
        -->
        <compound name='specdata' is-union='true' init-value='-1'>
            <int32_t name="hist_figure_id" ref-target='historical_figure'/>
        </compound>
        <bitfield name='material_category' type-name='job_material_category' comment='bay12: uint32_t job_item_flag'/>

        <stl-string name='reaction_name'/>

        <int32_t name='expire_timer' comment='toady: haul_timer; for stockpiling, +1 per 50 ticks if no worker; del when 20'/>
        <int16_t name='recheck_cntdn' comment='toady: auxilary_counter; for process_jobs'/>

        <stl-vector name='items' pointer-type='job_item_ref'/>
        <stl-vector name='specific_refs' pointer-type='specific_ref'/>
        <stl-vector name='general_refs' pointer-type='general_ref'/>
        <compound name='job_items' type-name='job_reqst'/>
    </struct-type>

    <struct-type type-name='job_reqst'>
        <stl-vector name='elements' pointer-type='job_item'/>
    </struct-type>

    <struct-type type-name='job_item_ref' original-name='jobitemst'>
        <pointer name='item' type-name='item'/>

        <enum base-type='int32_t' name='role'> bay12: JobRoleTypes
            <enum-item name='Other' comment="MAIN; eat, drink, pickup equipment"/>
            <enum-item name='Reagent' comment='MATERIAL'/>
            <enum-item name='Hauled' comment='REQUIRED'/>
            <enum-item name='LinkToTrigger'/>
            <enum-item name='LinkToTarget'/>
            <enum-item name='CleanSite'/>
            <enum-item name='TargetContainer' comment='NOTAG'/>
        </enum>
        <bitfield name='flags' base-type='uint32_t'> bay12: JOBITEMFLAG_*
            <flag-bit name='is_fetching'/>
        </bitfield>
        <int32_t name='job_item_idx'/>
    </struct-type>

    <bitfield-type type-name='job_item_flags1' base-type='uint32_t'> bay12: ITEMNEEDEDFLAG_*
        <flag-bit name='improvable'/>
        <flag-bit name="butcherable"/>
        <flag-bit name="millable"/>
        <flag-bit name="allow_buryable" comment='ALLOW items with flag "dead_dwarf"'/>
        <flag-bit name="unrotten" comment='check for item flag "rotten"'/>
        <flag-bit name="undisturbed" comment='check for item flag "spider_web"'/>
        <flag-bit name="collected" comment='check for item flag "spider_web"'/>
        <flag-bit name="sharpenable"/>

        <flag-bit name="murdered" comment='check for item flag'/>
        <flag-bit name="distillable"/>
        <flag-bit name="empty"/>
        <flag-bit name="processable" comment='processable plant, e.g. to thread'/>
        <flag-bit name="bag"/>
        <flag-bit name="cookable"/>
        <flag-bit name="extract_bearing_plant"/>
        <flag-bit name="extract_bearing_fish"/>

        <flag-bit name="extract_bearing_vermin"/>
        <flag-bit name="processable_to_vial"/>
        <flag-bit name="processable_to_bag"/>
        <flag-bit name="processable_to_barrel"/>
        <flag-bit name="solid"/>
        <flag-bit name="tameable_vermin"/>
        <flag-bit name="nearby"/>
        <flag-bit name="sand_bearing"/>

        <flag-bit name="glass" comment='check for material flag IS_GLASS'/>
        <flag-bit name="milk" comment='check if material has CHEESE_MAT'/>
        <flag-bit name="milkable"/>
        <flag-bit name='finished_goods'/>
        <flag-bit name='ammo'/>
        <flag-bit name='furniture'/>
        <flag-bit name='not_bin'/>
        <flag-bit name='lye_bearing'/>
    </bitfield-type>

    <bitfield-type type-name='job_item_flags2' base-type='uint32_t'> bay12: ITEMNEEDEDFLAG2_*
        <flag-bit name="dye"/>
        <flag-bit name="dyeable"/>
        <flag-bit name="dyed"/>
        <flag-bit name="sewn_imageless"/>
        <flag-bit name="glass_making"/>
        <flag-bit name="screw"/>
        <flag-bit name="building_material"/>
        <flag-bit name="fire_safe"/>

        <flag-bit name="magma_safe"/>
        <flag-bit name="deep_material" comment='check for inorganic material flag DEEP'/>
        <flag-bit name="melt_designated" comment='check for item flag "melt"'/>
        <flag-bit name="non_economic"/>
        <flag-bit name="allow_melt_dump" comment='CAN_USE_GARBAGE; item can be designated for melting or dumping'/>
        <flag-bit name="allow_artifact" comment='item can be artifact'/>
        <flag-bit name="plant" comment='check if material is a PLANT_MAT'/>
        <flag-bit name="silk" comment='check for material flag SILK'/>

        <flag-bit name="leather" comment='check for material flag LEATHER'/>
        <flag-bit name="bone" comment='check for material flag BONE'/>
        <flag-bit name="shell" comment='check for material flag SHELL'/>
        <flag-bit name="totemable"/>
        <flag-bit name="horn" comment='check for material flag HORN'/>
        <flag-bit name="pearl" comment='check for material flag PEARL'/>
        <flag-bit name="plaster_containing"/>
        <flag-bit name='hospital' comment='not actually respected'/>

        <flag-bit name="soap" comment='check for material flag SOAP'/>
        <flag-bit name="body_part" comment='itemtype CORPSE or CORPSEPIECE'/>
        <flag-bit name="ivory_tooth" comment='check for material flag TOOTH'/>
        <flag-bit name="lye_milk_free"/>
        <flag-bit name="blunt"/>
        <flag-bit name="unengraved"/>
        <flag-bit name="hair_wool" comment='ANY_STRAND_TISSUE'/>
        <flag-bit name="yarn" comment='check for material flag YARN'/>
    </bitfield-type>

    <bitfield-type type-name='job_item_flags3' base-type='uint32_t'> bay12: ITEMNEEDEDFLAG3_*
        <flag-bit name="unimproved"/>
        <flag-bit name="any_raw_material" comment='itemtype BAR, BOULDER, POWDER_MISC, or GLOB'/>
        <flag-bit name="non_absorbent"/>
        <flag-bit name="non_pressed"/>
        <flag-bit name='allow_liquid_powder'/>
        <flag-bit name="any_craft" comment='FIGURINE, AMULET, SCEPTER, CROWN, RING, EARRING, BRACLET'/>
        <flag-bit name="hard" comment='check for material flag ITEMS_HARD'/>
        <flag-bit name="food_storage"/>
    </bitfield-type>

    <struct-type type-name='job_item' original-name='job_req_elementst'>
        <enum name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index' init-value='-1'/>

        <bitfield name='flags1' type-name='job_item_flags1'/>

        <int32_t name='quantity' init-value='1'/>
        <enum name='vector_id' type-name='job_item_vector_id' init-value='IN_PLAY'/>

        <bitfield name='flags2' type-name='job_item_flags2'/>
        <bitfield name='flags3' type-name='job_item_flags3'/>
        <uint32_t name='flags4'/>
        <uint32_t name='flags5'/>

        -- Custom:
        <int32_t name='metal_ore' ref-target='inorganic_raw'/>

        <stl-string name='reaction_class'/>
        <stl-string name='has_material_reaction_product'/>

        <int32_t name='min_dimension' init-value='-1'/>
        <int32_t name='reagent_index' init-value='-1'/>
        <stl-vector type-name='int32_t' name='contains' comment='used with custom reactions'/>
        <int32_t name='reaction_id' ref-target='reaction'/>
        <enum name='has_tool_use' type-name='tool_uses'/>
    </struct-type>

    <struct-type type-name='job_item_filter' original-name='itemsearchst'>
        <enum name="item_type" type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index' init-value='-1'/>

        <bitfield name="flags1" type-name='job_item_flags1'/>

        <pointer name="item_vector">
            <stl-vector pointer-type='item'/>
        </pointer>

        <bool name="use_mat_index"/>

        <bitfield name="flags2" type-name='job_item_flags2'/>
        <bool name="use_flags2"/>

        <bitfield name="flags3" type-name='job_item_flags3'/>
        <bool name="use_flags3"/>

        <uint32_t name='flags4'/>
        <bool name="use_flags4"/>

        <uint32_t name='flags5'/>
        <bool name="use_flags5"/>

        <stl-string name='reaction_class'/>
        <stl-string name='has_material_reaction_product'/>
        <int32_t name="metal_ore" ref-target='inorganic_raw'/>

        <bool name="use_metal_ore"/>
        <bool name="use_reaction_class"/>
        <bool name="use_reaction_product"/>

        <int32_t name="min_dimension" init-value='-1'/>
        <int32_t name="reaction_id" ref-target='reaction'/>

        <stl-vector name='contains' type-name='int32_t'/>
        <bool name="use_contains"/>

        <enum name='has_tool_use' type-name='tool_uses'/>

        <compound name='pos' type-name='coord'/>

        <pointer name="unit" type-name='unit'/>
        <pointer name="job" type-name='job'/>
        <pointer name="building" type-name='building'/>

        <int32_t name='total_dim_count'/>

        <stl-vector name='burrows' type-name='int32_t' ref-target='burrow'/>
        <bool name="use_burrows"/>
    </struct-type>

    <bitfield-type type-name='manager_order_status' base-type='uint32_t'> bay12: WORKQUOTA_FLAG_*
        <flag-bit name="validated"/>
        <flag-bit name="active"/>
    </bitfield-type>

    <struct-type type-name='manager_order' original-name='workquotast'>
        <enum name='job_type' base-type='int16_t' type-name='job_type'/>
        <enum name='item_type' type-name='item_type' init-value='NONE'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)' init-value='-1'/>

        <stl-string name="reaction_name"/>

        <int16_t name="mat_type" ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name="mat_index" init-value='-1'/>

        <int32_t name='specflag'/>
        <int32_t name='specdata' init-value='-1'/>
        <bitfield name="material_category" type-name='job_material_category'/>

        <int16_t name="amount_left" />
        <int16_t name="amount_total" />
        <bitfield name="status" type-name='manager_order_status'/>
    </struct-type>

    <struct-type type-name='manager_order_template' original-name='jminfost'>
        <enum name='job_type' base-type='int16_t' type-name='job_type'/>
        <stl-string name="reaction_name"/>
        <enum name='item_type' type-name='item_type' init-value='NONE'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name="mat_type" ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name="mat_index"/>
        <int32_t name='specflag'/>
        <int32_t name='specdata' init-value='-1'/>
        <bitfield name="material_category" type-name='job_material_category'/>
        <bool name='on'/>
    </struct-type>

    <enum-type type-name='guild_id' base-type='int16_t'>
        <enum-item name='None' value='-1'/>
        <enum-item name='Miners'/>
        <enum-item name='Carpenters'/>
        <enum-item name='Masons'/>
        <enum-item name='Metalsmiths'/>
        <enum-item name='Jewelers'/>
        <enum-item name='Craftsmen'/>
    </enum-type>

    <struct-type type-name='punishmentst'>
        <int16_t name='hammerstrikes'/>
        <int16_t name='prison_time'/>
        <bitfield name='flags' base-type='uint32_t'> bay12: PUNISHMENTFLAG_*
            <flag-bit name='beating'/>
            <flag-bit name='exiled'/>
            <flag-bit name='death_sentence' comment='sentenced to death'/>
            <flag-bit name='no_prison_available' comment='would have been imprisoned but for lack of accommodations'/>
        </bitfield>
    </struct-type>

    <struct-type type-name='mandate' original-name='mandatest'>
        <pointer name='unit' type-name='unit'/>

        <enum name='mode' base-type='int16_t'> bay12: Mandates, no external base type
            <enum-item name='Export'/>
            <enum-item name='Make'/>
            <enum-item name='Guild'/>
        </enum>

        <enum base-type='int16_t' name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>

        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>

        <int16_t name='amount_total'/>
        <int16_t name='amount_remaining'/>

        <int32_t name='timeout_counter' comment='counts once per 10 frames'/>
        <int32_t name='timeout_limit' comment='once counter passes limit, mandate ends'/>

        <compound name='punishment' type-name='punishmentst'/>
        <int8_t name='punish_multiple' comment='mega_punish, likely dates back to 23a Mining mandates'/>
        <bitfield name='flags' base-type='uint32_t'> bay12: MANDATEFLAG_*
            <flag-bit name='mandate_total_exempt'/>
        </bitfield>
    </struct-type>

    <struct-type type-name='unit_demand' original-name='demandst'>
        <int16_t name="overtype"/>

        <enum base-type='int16_t' name='place'> bay12: DemandRooms
            <enum-item name='Office'/>
            <enum-item name='Bedroom'/>
            <enum-item name='DiningRoom'/>
            <enum-item name='Tomb'/>
        </enum>

        <enum name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name="mat_type" ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name="mat_index" init-value='-1'/>

        <int32_t name='timeout_counter' comment='counts once per 10 frames'/>
        <int32_t name='timeout_limit' comment='once counter passes limit, mandate ends'/>
    </struct-type>
</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
